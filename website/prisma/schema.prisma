generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mod {
  modID             String             @id
  songs             Song[]
  name              String
  cid               String
  extraInfos        ExtraInfo[]
  settings          Setting[]
  globalSettingMaps GlobalSettingMap[]
}

model Song {
  songID       Int    @id @default(autoincrement())
  mod          Mod    @relation(fields: [modID], references: [modID])
  modID        String
  diffs        Diff[]
  name         String
  internalName String
  iconCID      String
}

model Diff {
  diffID         Int     @id @default(autoincrement())
  song           Song    @relation(fields: [songID], references: [songID])
  songID         Int
  name           String
  internalNumber Int
  maxScore       Int     @default(0)
  scores         Score[]
}

model Score {
  scoreID String   @id @default(uuid()) @db.Uuid
  userID  String   @db.Uuid
  diff    Diff     @relation(fields: [diffID], references: [diffID])
  diffID  Int
  time    DateTime @default(now())
  score   Int
  pass    Boolean  @default(true)
}

enum ExtraInfoType {
  BOOL
  STRING
  NUMBER
}

model ExtraInfo {
  extraInfoID    Int             @id @default(autoincrement())
  mod            Mod             @relation(fields: [modID], references: [modID])
  modID          String
  internalName   String
  valueType      ExtraInfoType
  userExtraInfos UserExtraInfo[]
}

model UserExtraInfo {
  userExtraInfoID Int       @id @default(autoincrement())
  userID          String    @db.Uuid
  extraInfo       ExtraInfo @relation(fields: [extraInfoID], references: [extraInfoID])
  extraInfoID     Int
  value           String
}

model GlobalSetting {
  globalSettingID    Int                 @id @default(autoincrement())
  userGlobalSettings UserGlobalSetting[]
  globalSettingMaps  GlobalSettingMap[]
  name               String
}

model UserGlobalSetting {
  userGlobalSettingID Int           @id @default(autoincrement())
  userID              String        @db.Uuid
  globalSetting       GlobalSetting @relation(fields: [globalSettingID], references: [globalSettingID])
  globalSettingID     Int
  value               String
}

model GlobalSettingMap {
  globalSettingMapID Int           @id @default(autoincrement())
  globalSetting      GlobalSetting @relation(fields: [globalSettingID], references: [globalSettingID])
  globalSettingID    Int
  mod                Mod           @relation(fields: [modID], references: [modID])
  modID              String
  internalName       String
}

model Setting {
  settingID    Int           @id @default(autoincrement())
  mod          Mod           @relation(fields: [modID], references: [modID])
  modID        String
  name         String
  internalName String
  userSettings UserSetting[]
}

model UserSetting {
  userSettingID Int     @id @default(autoincrement())
  userID        String  @db.Uuid
  setting       Setting @relation(fields: [settingID], references: [settingID])
  settingID     Int
  value         String
}
